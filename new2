function promptPassword(callback) {
  if (!document.getElementById('passwordModal')) {
    const modalHtml = `
      <div class="modal fade" id="passwordModal" tabindex="-1" aria-labelledby="passwordModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="passwordModalLabel">Enter Password</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <input type="password" id="passwordInput" class="form-control" placeholder="Password">
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" id="passwordSubmit" class="btn btn-primary">Submit</button>
            </div>
          </div>
        </div>
      </div>`;
    document.body.insertAdjacentHTML('beforeend', modalHtml);
  }

  const modalElement = document.getElementById('passwordModal');
  const passwordModal = new bootstrap.Modal(modalElement);

  document.getElementById('passwordInput').value = '';

  const onSubmit = () => {
    const enteredPassword = document.getElementById('passwordInput').value;
    const correctPassword = 'yourPassword'; // Change this

    callback(enteredPassword === correctPassword);
    passwordModal.hide();
  };

  const onCancel = () => callback(false);

  // Clean listeners
  const submitBtn = document.getElementById('passwordSubmit');
  const clone = submitBtn.cloneNode(true);
  submitBtn.parentNode.replaceChild(clone, submitBtn);
  clone.addEventListener('click', onSubmit);

  modalElement.addEventListener('hidden.bs.modal', function handler() {
    modalElement.removeEventListener('hidden.bs.modal', handler);
    onCancel();
  });

  passwordModal.show();
}


/////////
const hot = new Handsontable(container, {
  data: yourData,
  colHeaders: true,
  rowHeaders: true,
  undo: true, // ‚úÖ Important!
  afterChange: function (changes, source) {
    if (!changes || source === 'loadData') return;

    promptPassword((isAuthenticated) => {
      if (!isAuthenticated) {
        hot.undo(); // üîÅ Revert last user change
      }
    });
  }
});
