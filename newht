function promptPassword(callback) {
  const existingModal = document.getElementById('passwordModal');

  if (!existingModal) {
    const modalHtml = `
      <div class="modal fade" id="passwordModal" tabindex="-1" aria-labelledby="passwordModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="passwordModalLabel">Enter Password</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <input type="password" id="passwordInput" class="form-control" placeholder="Password">
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" id="passwordSubmit" class="btn btn-primary">Submit</button>
            </div>
          </div>
        </div>
      </div>`;
    document.body.insertAdjacentHTML('beforeend', modalHtml);
  }

  const modalElement = document.getElementById('passwordModal');
  const passwordModal = new bootstrap.Modal(modalElement);

  // Clear previous input
  document.getElementById('passwordInput').value = '';

  const onSubmit = () => {
    const enteredPassword = document.getElementById('passwordInput').value;
    const correctPassword = 'yourPassword'; // âœ… CHANGE this to your actual password

    if (enteredPassword === correctPassword) {
      callback(true);
    } else {
      alert('Incorrect password. Action cancelled.');
      callback(false);
    }

    passwordModal.hide();
  };

  const onCancel = () => {
    callback(false);
  };

  // Ensure previous listeners are removed
  const submitBtn = document.getElementById('passwordSubmit');
  const clone = submitBtn.cloneNode(true);
  submitBtn.parentNode.replaceChild(clone, submitBtn);
  clone.addEventListener('click', onSubmit);

  modalElement.addEventListener('hidden.bs.modal', function handler() {
    modalElement.removeEventListener('hidden.bs.modal', handler);
    onCancel(); // Treat closing without submitting as cancel
  });

  passwordModal.show();
}



edit

beforeChange: function (changes, source) {
  if (!changes || changes.length === 0) return;

  if (['edit', 'CopyPaste.paste'].includes(source)) {
    const originalChanges = [...changes];
    changes.length = 0; // temporarily block changes

    promptPassword((isAuthenticated) => {
      if (isAuthenticated) {
        changes.push(...originalChanges); // Apply changes
      }
      // If not authenticated, nothing happens (changes blocked)
    });
  }
}

//create row
beforeCreateRow: function (index, amount, source) {
  return new Promise((resolve) => {
    promptPassword((isAuthenticated) => {
      resolve(isAuthenticated);
    });
  });
}

//before remove
beforeRemoveRow: function (index, amount, physicalRows, source) {
  return new Promise((resolve) => {
    promptPassword((isAuthenticated) => {
      resolve(isAuthenticated);
    });
  });
}